# -*- coding: utf-8 -*-
"""cloth_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FxDnoq4KwJJc-kbx0ErSuj-qmnIvXLdR

# importing Neccesary Libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split,cross_val_score,StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings("ignore")

"""# Loading the dataset"""

data=pd.read_csv('/content/final_test.csv')



"""# Data Analysis"""

data.head(5)

data.info()

# data.corr()

data.describe()

data['size'].value_counts()

"""# performing visualization of the dataset"""

df = data

sns.boxplot(x = "age", data = df)

sns.boxplot(x = 'weight',data=data)

sns.boxplot(x = 'height',data=data)

"""# otliers removal"""

df = []
zscore_threshold = 3
for size_type in data['size'].unique():
    ndf = data[['age', 'height', 'weight']][data['size'] == size_type]
    zscore = np.abs((ndf - ndf.mean()) / ndf.std())
    ndf = ndf[(zscore < zscore_threshold).all(axis=1)]
    ndf['size'] = size_type
    df.append(ndf)
    df_cleaned = pd.concat(df)
data=df_cleaned
data.head()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
data['size']=le.fit_transform(data['size'])

le.classes_

# plt.figure(figsize=(12,12))
# sns.heatmap(data.corr(),annot=True,cmap='terrain')

data.info()

data=data.dropna()
data['bmi'] = data['height']/data['weight']

data.info()

"""# data Splitting"""

x=data.drop('size',axis=1)
y=data['size']

x

from imblearn.over_sampling import SMOTE
smote = SMOTE()
x, y = smote.fit_resample(x, y)



x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30)

dt=DecisionTreeClassifier()
kFold=StratifiedKFold(n_splits=5)
cv_scores = cross_val_score(dt, x_train, y_train, cv=kFold, scoring='accuracy')
print(f"Cross-validation scores: {cv_scores}")
print(f"Mean accuracy: {cv_scores.mean()}")
dt.fit(x_train,y_train)
predictions = dt.predict(x_test)
print(classification_report(predictions,y_test))

from sklearn.model_selection import cross_val_score

rf=RandomForestClassifier(100)
kFold=StratifiedKFold(n_splits=5)
cv_scores = cross_val_score(rf, x_train, y_train, cv=kFold, scoring='accuracy')
print(f"Cross-validation scores: {cv_scores}")
print(f"Mean accuracy: {cv_scores.mean()}")
rf.fit(x_train,y_train)
predictions = rf.predict(x_test)
print(classification_report(predictions,y_test))

import pickle

# Assuming 'model' is your trained model
with open('model.pkl', 'wb') as file:
    pickle.dump(rf, file)

import pickle
import gzip

# Assuming 'model' is your trained model
with gzip.open('model.pkl.gz', 'wb') as file:
    pickle.dump(rf, file)

